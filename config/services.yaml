parameters:
    redis.host: '%env(resolve:REDIS_HOST)%'
    redis.port: '%env(resolve:REDIS_PORT)%'

services:
    _defaults:
        autowire: true
        autoconfigure: true

    redis:
        class: Redis
        calls:
            -   method: connect
                arguments:
                    - '%redis.host%'
                    - '%redis.port%'

    redis_cache_service:
        class: Doctrine\Common\Cache\RedisCache
        calls:
            -   method: setRedis
                arguments:
                    - '@redis'

    App\:
        resource: '../src/*'
        exclude: '../src/{Module/Employee/Tests,Infrastructure/tests,Module/Employee/Infrastructure/Migrations}'

    App\Module\Employee\UI\HTTP\REST\:
        resource: '../src/Module/Employee/UI/HTTP/REST'
        tags: ['controller.service_arguments']

    App\Module\Employee\Application\EmployeeApi:
        calls:
            -   method: addHandler
                arguments:
                    - '@App\Module\Employee\Application\Command\CreateEmployee\CreateEmployeeHandler'
            -   method: addHandler
                arguments:
                    - '@App\Module\Employee\Application\Command\EmployeeSaleProduct\EmployeeSaleProductHandler'
            -   method: addHandler
                arguments:
                    - '@App\Module\Employee\Application\Command\EmployeeWorkedDay\EmployeeWorkedDayHandler'
            -   method: addHandler
                arguments:
                    - '@App\Module\Employee\Application\Command\GenerateReport\Salary\GenerateForAllEmployees\GenerateForAllEmployeesHandler'
            -   method: addHandler
                arguments:
                    - '@App\Module\Employee\Application\Command\GenerateReport\Salary\GenerateForAllEmployees\GenerateForAllEmployeesHandler'

    App\Module\Employee\UI\HTTP\REST\JsonBodyParserSubscriber:
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.request', method: 'onKernelRequest', priority: 100}

    App\Infrastructure\Domain\EventDispatcher: '@App\Infrastructure\Infrastructure\EventDispatcher'

    App\Module\Employee\UI\HTTP\REST\Request\:
        resource: '../src/Module/Employee/UI/HTTP/REST/Request'
        autowire: false

    App\Module\Employee\UI\HTTP\REST\Request\RequestDTOResolver:
        arguments:
            - '@validator'
        tags:
            - { name: controller.request_value_resolver, priority: 50 }

    App\Module\Employee\UI\HTTP\REST\ExceptionSubscriber:
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.exception' }

    App\Module\Employee\Domain\EmployeeRepositoryInterface: '@App\Module\Employee\Infrastructure\Repository\EmployeeAggregateRepository'

    App\Module\Employee\Infrastructure\Projection\EmployeeProjection:
        public: true

    Mpdf\Mpdf:
        public: false

    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]